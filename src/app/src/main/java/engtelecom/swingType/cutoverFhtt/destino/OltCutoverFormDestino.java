/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package engtelecom.swingType.cutoverFhtt.destino;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JOptionPane;

/**
 *
 * @author faber222
 */
public class OltCutoverFormDestino extends javax.swing.JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JTree jTree1;

    private final boolean type;
    private int slotValue;
    private int ponValue;

    // End of variables declaration//GEN-END:variables

    private OltCutoverFormDestinoListener listener;

    /**
     * Creates new form OltCutoverFormDestino
     */
    public OltCutoverFormDestino(final boolean type, int slotValue, int ponValue) {
        this.type = type;
        this.slotValue = slotValue;
        this.ponValue = ponValue;
        initComponents();
    }

    public void setListener(final OltCutoverFormDestinoListener listener) {
        this.listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButtonOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        // Cria a "raiz técnica" invisível
        javax.swing.tree.DefaultMutableTreeNode root = new javax.swing.tree.DefaultMutableTreeNode("");

        javax.swing.tree.DefaultMutableTreeNode oltsRoot = new javax.swing.tree.DefaultMutableTreeNode("OLT'S");
        javax.swing.tree.DefaultMutableTreeNode uplinksRoot = new javax.swing.tree.DefaultMutableTreeNode("UPLINK's");

        Map<String, List<Integer>> olts = new LinkedHashMap<>();
        olts.put("AN6001-G16", Arrays.asList(1));
        olts.put("AN6000-2", Arrays.asList(1, 2));
        olts.put("AN6000-7", Arrays.asList(1, 2, 3, 4, 5, 6, 7));
        olts.put("AN6000-15", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17));
        olts.put("AN6000-17", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19));

        for (Map.Entry<String, List<Integer>> entry : olts.entrySet()) {
            String oltName = entry.getKey();
            List<Integer> slots = entry.getValue();

            // OLT'S
            javax.swing.tree.DefaultMutableTreeNode oltNode = new javax.swing.tree.DefaultMutableTreeNode(oltName);
            for (Integer slot : slots) {
                javax.swing.tree.DefaultMutableTreeNode slotNode = new javax.swing.tree.DefaultMutableTreeNode(
                        "SLOT " + slot);

                if (!this.type) {
                    for (int pon = 1; pon <= 16; pon++) {
                        javax.swing.tree.DefaultMutableTreeNode ponNode = new javax.swing.tree.DefaultMutableTreeNode(
                                "PON " + pon);
                        slotNode.add(ponNode);
                    }
                }

                oltNode.add(slotNode);
            }
            oltsRoot.add(oltNode);

            javax.swing.tree.DefaultMutableTreeNode uplinkModel = new javax.swing.tree.DefaultMutableTreeNode(oltName);

            switch (oltName) {
                case "AN6001-G16":
                    javax.swing.tree.DefaultMutableTreeNode slot19 = new javax.swing.tree.DefaultMutableTreeNode(
                            "SLOT 19");
                    for (int i = 1; i <= 6; i++) {
                        slot19.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                    }
                    uplinkModel.add(slot19);
                    break;

                case "AN6000-2":
                    for (int s = 3; s <= 4; s++) {
                        javax.swing.tree.DefaultMutableTreeNode slot = new javax.swing.tree.DefaultMutableTreeNode(
                                "SLOT " + s);
                        for (int i = 1; i <= 6; i++) {
                            slot.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        uplinkModel.add(slot);
                    }
                    break;

                case "AN6000-7":
                    for (int s = 6; s <= 7; s++) {
                        javax.swing.tree.DefaultMutableTreeNode slot = new javax.swing.tree.DefaultMutableTreeNode(
                                "SLOT " + s);
                        javax.swing.tree.DefaultMutableTreeNode ku1bNode = new javax.swing.tree.DefaultMutableTreeNode(
                                "KU1B");
                        for (int i = 1; i <= 5; i++) {
                            ku1bNode.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        slot.add(ku1bNode);

                        javax.swing.tree.DefaultMutableTreeNode hu8aNode = new javax.swing.tree.DefaultMutableTreeNode(
                                "HU8A");
                        for (int i = 1; i <= 8; i++) {
                            hu8aNode.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        slot.add(hu8aNode);

                        uplinkModel.add(slot);
                    }
                    for (int s = 8; s <= 9; s++) {
                        javax.swing.tree.DefaultMutableTreeNode slot = new javax.swing.tree.DefaultMutableTreeNode(
                                "SLOT " + s);
                        for (int i = 1; i <= 4; i++) {
                            slot.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        uplinkModel.add(slot);
                    }
                    break;

                case "AN6000-15":
                    for (int s = 8; s <= 9; s++) {
                        javax.swing.tree.DefaultMutableTreeNode slot = new javax.swing.tree.DefaultMutableTreeNode(
                                "SLOT " + s);
                        for (int i = 1; i <= 4; i++) {
                            slot.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        uplinkModel.add(slot);
                    }
                    for (int s = 16; s <= 17; s++) {
                        javax.swing.tree.DefaultMutableTreeNode slot = new javax.swing.tree.DefaultMutableTreeNode(
                                "SLOT " + s);
                        javax.swing.tree.DefaultMutableTreeNode ku1bNode = new javax.swing.tree.DefaultMutableTreeNode(
                                "KU1B");
                        for (int i = 1; i <= 5; i++) {
                            ku1bNode.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        slot.add(ku1bNode);

                        javax.swing.tree.DefaultMutableTreeNode hu8aNode = new javax.swing.tree.DefaultMutableTreeNode(
                                "HU8A");
                        for (int i = 1; i <= 8; i++) {
                            hu8aNode.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        slot.add(hu8aNode);

                        uplinkModel.add(slot);
                    }
                    break;

                case "AN6000-17":
                    for (int s = 9; s <= 10; s++) {
                        javax.swing.tree.DefaultMutableTreeNode slot = new javax.swing.tree.DefaultMutableTreeNode(
                                "SLOT " + s);
                        for (int i = 1; i <= 4; i++) {
                            slot.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        uplinkModel.add(slot);
                    }
                    for (int s = 18; s <= 19; s++) {
                        javax.swing.tree.DefaultMutableTreeNode slot = new javax.swing.tree.DefaultMutableTreeNode(
                                "SLOT " + s);
                        javax.swing.tree.DefaultMutableTreeNode ku1bNode = new javax.swing.tree.DefaultMutableTreeNode(
                                "KU1B");
                        for (int i = 1; i <= 5; i++) {
                            ku1bNode.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        slot.add(ku1bNode);

                        javax.swing.tree.DefaultMutableTreeNode hu8aNode = new javax.swing.tree.DefaultMutableTreeNode(
                                "HU8A");
                        for (int i = 1; i <= 8; i++) {
                            hu8aNode.add(new javax.swing.tree.DefaultMutableTreeNode("PORTA " + i));
                        }
                        slot.add(hu8aNode);

                        uplinkModel.add(slot);
                    }
                    break;
            }

            uplinksRoot.add(uplinkModel);

        }

        // Adiciona os dois grupos à raiz técnica invisível
        root.add(oltsRoot);
        root.add(uplinksRoot);

        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(root));
        jTree1.setRootVisible(false); // Esconde a raiz técnica ("")

        jScrollPane2.setViewportView(jTree1);

        jScrollPane2.setViewportView(jTree1);
        jTree1.getSelectionModel().setSelectionMode(
                javax.swing.tree.TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        final javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                                jPanel1Layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addComponent(jButtonOK)))
                                .addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jButtonOK)
                                .addGap(6, 6, 6)));

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOKActionPerformed(final java.awt.event.ActionEvent evt) {
        final javax.swing.tree.TreePath[] selectedPaths = jTree1.getSelectionPaths();
        final ArrayList<String[]> oltNodos = new ArrayList<>();
        final ArrayList<String[]> uplinkNodos = new ArrayList<>();

        if (selectedPaths != null && selectedPaths.length > 0) {
            for (final javax.swing.tree.TreePath path : selectedPaths) {
                final Object[] nodes = path.getPath();

                if (nodes.length >= 2) {
                    String topLevel = nodes[1].toString();

                    if ("OLT'S".equals(topLevel)) {
                        if (nodes.length == 4 && nodes[3].toString().startsWith("SLOT") && this.type) {
                            final String slot = extrairNumero(nodes[3].toString());
                            oltNodos.add(new String[] { slot });
                        } else if (nodes.length == 5 && nodes[4].toString().startsWith("PON") && !this.type) {
                            final String slot = extrairNumero(nodes[3].toString());
                            final String pon = extrairNumero(nodes[4].toString());
                            oltNodos.add(new String[] { slot, pon });
                        }
                    } else if ("UPLINK's".equals(topLevel)) {
                        if (nodes.length <= 5) {
                            final String slot = extrairNumero(nodes[3].toString());
                            final String porta = extrairNumero(nodes[4].toString());
                            uplinkNodos.add(new String[] { slot, porta });
                        } else if (nodes.length > 5) {
                            final String slot = extrairNumero(nodes[3].toString());
                            final String porta = extrairNumero(nodes[5].toString());
                            uplinkNodos.add(new String[] { slot, porta });
                        }
                    }
                }
            }

            if (uplinkNodos.isEmpty() && !oltNodos.isEmpty()) {
                JOptionPane.showMessageDialog(
                        null,
                        "Erro: É obrigatório selecionar alguma porta uplink, use a tecla Ctrl para selecionar ao \n"
                                + " mesmo tempo um porta ou slot de serviço e também selecionar uma porta de uplink!",
                        "Campo vazio!",
                        JOptionPane.ERROR_MESSAGE);
                this.dispose();
            } else if (oltNodos.isEmpty()) {
                JOptionPane.showMessageDialog(
                        null,
                        "Erro: Selecione algum Slot ou Pon!", "Campo vazio!",
                        JOptionPane.ERROR_MESSAGE);
                this.dispose();

            } else if (uplinkNodos.isEmpty()) {
                JOptionPane.showMessageDialog(
                        null,
                        "Erro: É obrigatório selecionar alguma porta uplink!", "Campo vazio!",
                        JOptionPane.ERROR_MESSAGE);
                this.dispose();

            } else if (listener != null) {
                listener.onProfileFormDestinoCreated(oltNodos, uplinkNodos, this.slotValue, this.ponValue);
            }
            this.dispose();

        } else {
            System.out.println("Nenhuma seleção válida.");
        }
    }

    private String extrairNumero(String texto) {
        java.util.regex.Matcher matcher = java.util.regex.Pattern.compile("\\d+(\\.\\d+)?").matcher(texto);
        if (matcher.find()) {
            return matcher.group();
        }
        return null;
    }

}
